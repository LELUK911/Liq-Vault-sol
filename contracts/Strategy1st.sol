// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

pragma solidity ^0.8.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import {BaseStrategy, StrategyParams} from "@yearnvaults/contracts/BaseStrategy.sol";

import {Address} from "@openzeppelin/contracts/utils/Address.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "./interfaces/<protocol>/<Interface>.sol";

contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;

    // solhint-disable-next-line no-empty-blocks
    constructor(address _vault) BaseStrategy(_vault) {}

    // Funzioni per la gestione della strategia

    address[] public protocols;
    mapping(uint8 => address) public procolsIndex;

    //Aggiorniamo gli address dei protocolli, seppur le funzioni esterne dei protocolli resteranno le stesse si puo sempre aggiornare l'address della strategia penso, oppure puo esser
    function setProtocolsAddress(address _address) external {
        //!QUI VA L'ONLY OWNER
        require(_address != address(0), "Address is not a contract");
        protocols.push(_address);
        procolsIndex[uint8(protocols.length)] = _address;
    }

    //Aggiornamento spesa manuale
    function updateUnlimitedSpending(bool _approve) external {
        //!QUI VA L'ONLY OWNER
        if (_approve) {
            SafeERC20.safeIncreaseAllowance(
                IERC20(want),
                address(vault),
                type(uint256).max
            );
        } else {
            SafeERC20.forceApprove(IERC20(want), address(vault), 0);
        }
    }

    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {
        // Add your own name here, suggestion e.g. "StrategyCreamYFI"
        return "Strategy StMantle defi steaking";
    }

    function estimatedTotalAssets() public view override returns (uint256) {
        // TODO: Build a more accurate estimate using the value of all positions in terms of `want`
        return want.balanceOf(address(this));
    }

    function prepareReturn(
        uint256 _debtOutstanding
    )
        internal
        override
        returns (uint256 _profit, uint256 _loss, uint256 _debtPayment)
    // solhint-disable-next-line no-empty-blocks
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position
        uint256 _balanceInContract = want.balanceOf(address(this)); // vedo quanti token liberi  ho nella contratto della strategia
        if (_balanceInContract < _debtOutstanding) {
            uint256 _amountToInvest = _balanceInContract - _debtOutstanding; // calcolo quanto posso investire
            uint256 _amountReturn = _withdrawTokenFromStrategy(_amountToInvest); // prelevo i fondi dalla strategia
            require(_amountReturn > _amountToInvest, "Error in withdraw"); // Per ora facciamo finta che i fondi debbano essere sempre uguali, ma potrebbe essere un bug in caSO DI PROblemi di liquidita
        }
        (_profit, _loss, _debtPayment) = _returnDepositPlatformValue();
        // QUI SEMPLICEMENTE CONTROLLO SE CI SONO DA PRELEVARE FONDI E AGGIORNI DATI DEL REPORT .
    }

    // solhint-disable-next-line no-empty-blocks
    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)

        uint256 _balanceInContract = want.balanceOf(address(this)); // vedo quanti token liberi  ho nella contratto della strategia
        if (_balanceInContract > _debtOutstanding) {
            uint256 _amountToInvest = _balanceInContract - _debtOutstanding; // calcolo quanto posso investire
            bool success = _investInStrategy(_amountToInvest); // investo i fondi nella strategia
            require(success, "Error in invest");
        }
        //altrimenti niente ci teniamo i fondi liquidi
    }

    function liquidatePosition(
        uint256 _amountNeeded
    ) internal override returns (uint256 _liquidatedAmount, uint256 _loss) {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        uint256 totalAssets = want.balanceOf(address(this));

        // 1. Verifichiamo se ho abbastanza liquidità
        if (totalAssets >= _amountNeeded) {
            //se abbiamo più liquidità di quella che ci serve
            //! allora va bene
            _liquidatedAmount = _amountNeeded;
            _loss = 0;
        } else {
            (_liquidatedAmount, _loss) = _withdrawSingleAmount(_amountNeeded);
        }

        //! vincoli (solo per sviluppare ora )
        //! require(want.balanceOf(address(this)) >= _liquidatedAmount);
        //! require(_liquidatedAmount + _loss <= _amountNeeded);
    }

    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        bool success = _totalRecall();
        require(success, "Error in total recall");
        return want.balanceOf(address(this));
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary
    // solhint-disable-next-line no-empty-blocks
    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
        //! PER ORA NON POSSO PREVEDERLO QUINDI DIREI CHE LO LASCIO VUOTO.
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    // solhint-disable-next-line no-empty-blocks
    {

    }

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(
        uint256 _amtInWei
    ) public view virtual override returns (uint256) {
        // TODO create an accurate price oracle
        //! implementero un oracolo per il prezzo di MNT in ETH
        return _amtInWei;
    }

    function _withdrawTokenFromStrategy(
        uint256 _amoutn
    ) internal returns (uint256 returnAmount) {
        //! QUI DEVO RITIRARE I FONDI DALLE VARIE PIATTAFORME DOVE LI HO DEPOSITATI
        returnAmount = 0;
    }

    function _returnDepositPlatformValue()
        internal
        view
        returns (uint256 _profit, uint256 _loss, uint256 _debtPayment)
    {
        //! non so ancora come fare ovviamente
        return (_profit, _loss, _debtPayment);
    }

    function _investInStrategy(
        uint256 _amount
    ) internal returns (bool success) {
        //! QUI DEVO INVESTIRE I FONDI NELLE VARIE PIATTAFORME DOVE LI HO DEPOSITATI
        success = true;
    }

    function _withdrawSingleAmount(
        uint256 _amount
    ) internal returns (uint256 returnAmount, uint256 _loss) {
        //! QUI RITIRIAMO I FONDI PER L'UTENTE CHE SE NE STA ANDANDO
        returnAmount = _amount;
        _loss = 0;
    }

    function _totalRecall() internal returns (bool success) {
        //! semplicemente chiamiamo tutti i fondi dalle varie piattaforme
    } 
}
